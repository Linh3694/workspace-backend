// backend/routes/authMicrosoft.js
const express = require("express");
const passport = require("passport");
const { OIDCStrategy } = require("passport-azure-ad");
const jwt = require("jsonwebtoken");
const User = require("../../models/Users");
const router = express.Router();
const redisService = require('../../services/redisService');

const azureConfig = require("../../config/azure");

// C·∫•u h√¨nh passport strategy v·ªõi OIDCStrategy
passport.use(
  new OIDCStrategy(
    {
      identityMetadata: `https://login.microsoftonline.com/${azureConfig.credentials.tenantID}/v2.0/.well-known/openid-configuration`,
      clientID: azureConfig.credentials.clientID,
      clientSecret: azureConfig.credentials.clientSecret,
      responseType: "code",
      responseMode: "query",
      redirectUrl: azureConfig.credentials.callbackURL,
      allowHttpForRedirectUrl: true,
      passReqToCallback: false,
      scope: ["User.Read", "profile", "email", "openid"],
      // Th√™m c√°c tu·ª≥ ch·ªçn debug
      loggingLevel: "info",
      validateIssuer: false, // N·∫øu b·∫°n mu·ªën t·∫Øt x√°c th·ª±c issuer (ƒë·∫∑c bi·ªát l√† khi d√πng multi-tenant)
    },
    // Callback khi nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Microsoft
    async (iss, sub, profile, accessToken, refreshToken, params, done) => {
      if (!profile || !profile._json) {
        console.error("‚ùå L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin user t·ª´ Microsoft.");
        return done(null, false, { message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin t·ª´ Microsoft" });
      }

      try {
        // L·∫•y email v√† t√™n t·ª´ profile tr·∫£ v·ªÅ t·ª´ Microsoft
        const email = profile._json.preferred_username;
        const displayName = profile.displayName || "No name";

        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
        let user = await User.findOne({ email });
        if (!user) {
          // N·∫øu ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi user v·ªõi flag needProfileUpdate = true
          user = new User({
            fullname: displayName,
            email,
            password: "", // V√¨ d√πng OAuth n√™n kh√¥ng c·∫ßn m·∫≠t kh·∫©u
            role: "user", // Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            needProfileUpdate: true, // ƒê√°nh d·∫•u y√™u c·∫ßu b·ªï sung th√¥ng tin
          });
          await user.save();

          // X√≥a cache danh s√°ch users khi t·∫°o user m·ªõi
          await redisService.deleteAllUsersCache();
        }

        // L∆∞u th√¥ng tin user v√†o Redis
        await redisService.setUserData(user._id, user);

        return done(null, user);
      } catch (error) {
        return done(error, null);
      }
    }
  )
);

// Serialize/Deserialize (n·∫øu d√πng session)
passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
  try {
    // Ki·ªÉm tra cache tr∆∞·ªõc
    let user = await redisService.getUserData(id);
    if (!user) {
      // N·∫øu kh√¥ng c√≥ trong cache, truy v·∫•n database
      user = await User.findById(id);
      if (user) {
        // L∆∞u v√†o cache
        await redisService.setUserData(id, user);
      }
    }
    done(null, user);
  } catch (error) {
    done(error, null);
  }
});

// Route b·∫Øt ƒë·∫ßu flow OAuth v·ªõi Microsoft
router.get("/microsoft", (req, res, next) => {
  const redirectUri = req.query.redirectUri || "";
  const isMobile = req.query.mobile === "true";
  const isAdmission = req.query.admission === "true";

  // L∆∞u th√¥ng tin t√πy ch·ªânh v√†o session
  req.session.authState = { redirectUri, isMobile, isAdmission };
  console.log("üîç Nh·∫≠n ƒë∆∞·ª£c request ƒë·∫øn /microsoft v·ªõi redirectUri:", redirectUri);
  passport.authenticate("azuread-openidconnect")(req, res, next);
});

router.get("/microsoft/callback", (req, res, next) => {
  let redirectUri = "";
  let isMobile = false;
  let isAdmission = false;

  // L·∫•y th√¥ng tin t·ª´ session (n·∫øu c√≥)
  if (req.session && req.session.authState) {
    redirectUri = req.session.authState.redirectUri;
    isMobile = req.session.authState.isMobile;
    isAdmission = req.session.authState.isAdmission;
    // X√≥a sau khi ƒë√£ l·∫•y ƒë·ªÉ kh√¥ng l·ªô th√¥ng tin l·∫ßn sau
    delete req.session.authState;
  }

  passport.authenticate("azuread-openidconnect", async (err, user, info) => {
    if (err) {
      console.error("‚ùå L·ªói t·ª´ Microsoft OAuth:", err);
      return res.redirect(`http://localhost:3000/login?error=${encodeURIComponent(err.message)}`);
    }
    if (!user) {
      console.error("‚ùå L·ªói x√°c th·ª±c: Kh√¥ng t√¨m th·∫•y user.");
      return res.redirect(`http://localhost:3000/login?error=Authentication+failed`);
    }

    try {
      // üîë T·∫°o JWT token
      const token = jwt.sign(
        { id: user._id, role: user.role },
        process.env.JWT_SECRET,
        { expiresIn: "365d" }
      );

      // L∆∞u token v√†o Redis n·∫øu c√≥ th·ªÉ, nh∆∞ng kh√¥ng block lu·ªìng ch√≠nh
      try {
        await redisService.setAuthToken(user._id, token);
        await redisService.setUserData(user._id, user);
      } catch (redisError) {
        console.warn("Kh√¥ng th·ªÉ l∆∞u v√†o Redis:", redisError);
        // Ti·∫øp t·ª•c x·ª≠ l√Ω m√† kh√¥ng block
      }

      // N·∫øu ƒëƒÉng nh·∫≠p t·ª´ mobile v√† c√≥ redirectUri th√¨ chuy·ªÉn v·ªÅ mobile
      if (isMobile && redirectUri) {
        return res.redirect(`${redirectUri}?token=${token}`);
      }

      // N·∫øu t·ª´ web, chuy·ªÉn h∆∞·ªõng v·ªÅ frontend
      const admissionQuery = isAdmission ? "&admission=true" : "";
      return res.redirect(`http://localhost:3000/auth/microsoft/success?token=${token}${admissionQuery}`);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o JWT:", error);
      return res.redirect(`http://localhost:3000/login?error=${encodeURIComponent(error.message)}`);
    }
  })(req, res, next);
});

module.exports = router;