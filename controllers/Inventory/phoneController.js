const Phone = require("../../models/Phone");
const path = require("path");
const fs = require("fs");
const User = require("../../models/Users");
const Room = require("../../models/Room")
const mongoose = require("mongoose");
const upload = require("../../middleware/uploadHandover"); // Middleware Multer
const redisService = require("../../services/redisService");

// L·∫•y danh s√°ch phone v·ªõi pagination
exports.getPhones = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;
    
    // Get search and filter parameters
    const { search, status, manufacturer, type, releaseYear } = req.query;
    
    console.log('üîç [Phone] Filters received:', { search, status, manufacturer, type, releaseYear });

    // Only use cache if no filters are applied
    const hasFilters = search || status || manufacturer || type || releaseYear;
    
    if (!hasFilters) {
      // Ki·ªÉm tra cache tr∆∞·ªõc
      const cachedData = await redisService.getDevicePage('phone', page, limit);
      if (cachedData) {
        console.log(`[Cache] Returning cached phones page ${page}`);
        return res.status(200).json({
          populatedPhones: cachedData.devices,
          pagination: {
            currentPage: page,
            totalPages: Math.ceil(cachedData.total / limit),
            totalItems: cachedData.total,
            itemsPerPage: limit,
            hasNext: page < Math.ceil(cachedData.total / limit),
            hasPrev: page > 1
          }
        });
      }
    }

    // N·∫øu kh√¥ng c√≥ cache, fetch t·ª´ DB
    console.log(`[DB] Fetching phones page ${page} from database`);
    
    // Build filter query
    const query = {};
    
    // Add search functionality
    if (search) {
      query.$or = [
        { name: { $regex: search, $options: "i" } },
        { serial: { $regex: search, $options: "i" } },
        { manufacturer: { $regex: search, $options: "i" } },
        { imei1: { $regex: search, $options: "i" } },
        { imei2: { $regex: search, $options: "i" } },
        { phoneNumber: { $regex: search, $options: "i" } }
      ];
    }
    
    // Add status filter
    if (status && status !== 'all') {
      query.status = status;
    }
    
    // Add manufacturer filter
    if (manufacturer && manufacturer !== 'all') {
      query.manufacturer = manufacturer;
    }
    
    // Add type filter
    if (type && type !== 'all') {
      query.type = type;
    }
    
    // Add releaseYear filter
    if (releaseYear && releaseYear !== 'all') {
      query.releaseYear = parseInt(releaseYear);
    }

    console.log('üì± [Phone] Final query:', query);

    // Get total count for pagination
    const totalItems = await Phone.countDocuments(query);
    const totalPages = Math.ceil(totalItems / limit);

    // Fetch phones with population
    const populatedPhones = await Phone.find(query)
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    console.log(`üì± [Phone] Found ${populatedPhones.length} phones for page ${page}`);

    // Cache ch·ªâ khi kh√¥ng c√≥ filter
    if (!hasFilters) {
      await redisService.cacheDevicePage('phone', page, limit, populatedPhones, totalItems);
      console.log(`[Cache] Cached phones page ${page}`);
    }

    return res.status(200).json({
      populatedPhones,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        itemsPerPage: limit,
        hasNext: page < totalPages,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    console.error("Error fetching phones:", error.message);
    return res.status(500).json({
      message: "Error fetching phones",
      error: error.message,
    });
  }
};

// Th√™m m·ªõi phone
exports.createPhone = async (req, res) => {
  try {
    console.log("Request Body:", req.body);

    const { 
      name, 
      manufacturer, 
      serial, 
      imei1,
      imei2,
      phoneNumber,
      assigned, 
      status, 
      specs, 
      type, 
      room, 
      reason,
      releaseYear
    } = req.body;
    const userId = req.body.userId || req.headers["user-id"];

    if (!name || !serial || !imei1) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (name, serial, imei1)!" });
    }

    if (!specs || typeof specs !== "object") {
      return res.status(400).json({ message: "Th√¥ng tin specs kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra serial tr√πng
    const existingPhone = await Phone.findOne({ serial });
    if (existingPhone) {
      return res.status(400).json({
        message: `Serial "${serial}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
      });
    }

    // Ki·ªÉm tra IMEI1 tr√πng
    const existingIMEI1 = await Phone.findOne({ imei1 });
    if (existingIMEI1) {
      return res.status(400).json({
        message: `IMEI1 "${imei1}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
      });
    }

    // Ki·ªÉm tra IMEI2 tr√πng (n·∫øu c√≥)
    if (imei2) {
      const existingIMEI2 = await Phone.findOne({ imei2 });
      if (existingIMEI2) {
        return res.status(400).json({
          message: `IMEI2 "${imei2}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
        });
      }
    }

    // Ki·ªÉm tra assigned
    if (assigned && !Array.isArray(assigned)) {
      return res
        .status(400)
        .json({ message: "Assigned ph·∫£i l√† m·∫£ng ID ng∆∞·ªùi s·ª≠ d·ª•ng h·ª£p l·ªá." });
    }

    // Ki·ªÉm tra room n·∫øu c√≥
    if (room && !mongoose.Types.ObjectId.isValid(room)) {
      return res.status(400).json({ message: "Room ID kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra reason n·∫øu status = Broken
    if (status === "Broken" && !reason) {
      return res
        .status(400)
        .json({ message: "L√Ω do b√°o h·ªèng l√† b·∫Øt bu·ªôc khi tr·∫°ng th√°i l√† 'Broken'!" });
    }

    // T·∫°o phone m·ªõi
    const newPhone = new Phone({
      name,
      manufacturer,
      serial,
      imei1,
      imei2,
      phoneNumber,
      releaseYear,
      assigned: assigned || [],
      status: status || "Standby",
      specs,
      type: type || "Phone",
      room: room || null,
      brokenReason: status === "Broken" ? reason : null,
    });

    // L∆∞u phone v√†o database
    const savedPhone = await newPhone.save();

    // X√≥a cache khi c√≥ thi·∫øt b·ªã m·ªõi
    await redisService.clearDeviceCache('phone');

    // Populate th√¥ng tin tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const populatedPhone = await Phone.findById(savedPhone._id)
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    // T·∫°o assignment history n·∫øu c√≥ assigned
    if (assigned && assigned.length > 0) {
      const assignmentHistory = assigned.map(userId => ({
        user: userId,
        startDate: new Date(),
        assignedBy: userId, // C√≥ th·ªÉ s·ª≠ d·ª•ng req.user._id n·∫øu c√≥ auth
        notes: "B√†n giao ban ƒë·∫ßu",
      }));

      populatedPhone.assignmentHistory = assignmentHistory;
      await populatedPhone.save();
    }

    return res.status(201).json({
      message: "T·∫°o ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: populatedPhone,
    });
  } catch (error) {
    console.error("Error creating phone:", error.message);
    return res.status(500).json({
      message: "L·ªói khi t·∫°o ƒëi·ªán tho·∫°i",
      error: error.message,
    });
  }
};

// C·∫≠p nh·∫≠t phone
exports.updatePhone = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    // T√¨m phone hi·ªán t·∫°i
    const existingPhone = await Phone.findById(id);
    if (!existingPhone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // Ki·ªÉm tra serial tr√πng (n·∫øu thay ƒë·ªïi)
    if (updateData.serial && updateData.serial !== existingPhone.serial) {
      const duplicateSerial = await Phone.findOne({ 
        serial: updateData.serial, 
        _id: { $ne: id } 
      });
      if (duplicateSerial) {
        return res.status(400).json({
          message: `Serial "${updateData.serial}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
        });
      }
    }

    // Ki·ªÉm tra IMEI1 tr√πng (n·∫øu thay ƒë·ªïi)
    if (updateData.imei1 && updateData.imei1 !== existingPhone.imei1) {
      const duplicateIMEI1 = await Phone.findOne({ 
        imei1: updateData.imei1, 
        _id: { $ne: id } 
      });
      if (duplicateIMEI1) {
        return res.status(400).json({
          message: `IMEI1 "${updateData.imei1}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
        });
      }
    }

    // Ki·ªÉm tra IMEI2 tr√πng (n·∫øu thay ƒë·ªïi)
    if (updateData.imei2 && updateData.imei2 !== existingPhone.imei2) {
      const duplicateIMEI2 = await Phone.findOne({ 
        imei2: updateData.imei2, 
        _id: { $ne: id } 
      });
      if (duplicateIMEI2) {
        return res.status(400).json({
          message: `IMEI2 "${updateData.imei2}" ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.`,
        });
      }
    }

    // C·∫≠p nh·∫≠t phone
    const updatedPhone = await Phone.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    )
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: updatedPhone,
    });
  } catch (error) {
    console.error("Error updating phone:", error.message);
    return res.status(500).json({
      message: "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªán tho·∫°i",
      error: error.message,
    });
  }
};

// X√≥a phone
exports.deletePhone = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    // T√¨m v√† x√≥a phone
    const deletedPhone = await Phone.findByIdAndDelete(id);
    if (!deletedPhone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    return res.status(200).json({
      message: "X√≥a ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: deletedPhone,
    });
  } catch (error) {
    console.error("Error deleting phone:", error.message);
    return res.status(500).json({
      message: "L·ªói khi x√≥a ƒëi·ªán tho·∫°i",
      error: error.message,
    });
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt phone
exports.getPhoneById = async (req, res) => {
  const { id } = req.params;

  try {
    const phone = await Phone.findById(id)
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status")
      .populate("assignmentHistory.user", "fullname email jobTitle avatarUrl")
      .populate("assignmentHistory.assignedBy", "fullname email jobTitle avatarUrl")
      .populate("assignmentHistory.revokedBy", "fullname email jobTitle avatarUrl");

    if (!phone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i" });
    }

    res.status(200).json(phone);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ƒëi·ªán tho·∫°i:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error });
  }
};

// L·∫•y filter options cho phone
exports.getPhoneFilterOptions = async (req, res) => {
  try {
    const manufacturers = await Phone.distinct("manufacturer");
    const types = await Phone.distinct("type");
    const yearRange = await Phone.aggregate([
      {
        $group: {
          _id: null,
          minYear: { $min: "$releaseYear" },
          maxYear: { $max: "$releaseYear" }
        }
      }
    ]);

    const currentYear = new Date().getFullYear();
    const minYear = yearRange[0]?.minYear || 2015;
    const maxYear = yearRange[0]?.maxYear || currentYear;

    res.status(200).json({
      manufacturers: manufacturers.filter(m => m),
      types: types.filter(t => t),
      yearRange: [minYear, maxYear]
    });
  } catch (error) {
    console.error("Error getting phone filter options:", error);
    res.status(500).json({
      message: "Error getting filter options",
      error: error.message
    });
  }
};

// Assign phone to user
exports.assignPhone = async (req, res) => {
  try {
    const { id } = req.params;
    const { newUserId, notes } = req.body;
    const userId = req.headers["user-id"];

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    if (!newUserId || !mongoose.Types.ObjectId.isValid(newUserId)) {
      return res.status(400).json({ message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
    }

    // T√¨m phone
    const phone = await Phone.findById(id);
    if (!phone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // T√¨m user
    const user = await User.findById(newUserId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    // C·∫≠p nh·∫≠t assignment
    phone.assigned = [newUserId];
    phone.status = "Active";

    // Th√™m v√†o assignment history
    phone.assignmentHistory.push({
      user: newUserId,
      userName: user.fullname,
      jobTitle: user.jobTitle,
      startDate: new Date(),
      assignedBy: userId,
      notes: notes || "B√†n giao ƒëi·ªán tho·∫°i"
    });

    const updatedPhone = await phone.save();

    // Populate th√¥ng tin tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const populatedPhone = await Phone.findById(updatedPhone._id)
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    res.status(200).json({
      message: "B√†n giao ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: populatedPhone
    });
  } catch (error) {
    console.error("Error assigning phone:", error);
    res.status(500).json({
      message: "L·ªói khi b√†n giao ƒëi·ªán tho·∫°i",
      error: error.message
    });
  }
};

// Revoke phone from user
exports.revokePhone = async (req, res) => {
  try {
    const { id } = req.params;
    const { reasons, status = 'Standby' } = req.body;
    const userId = req.headers["user-id"];

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    // T√¨m phone
    const phone = await Phone.findById(id);
    if (!phone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // C·∫≠p nh·∫≠t assignment history hi·ªán t·∫°i
    const currentAssignment = phone.assignmentHistory.find(
      history => history.user && !history.endDate
    );

    if (currentAssignment) {
      currentAssignment.endDate = new Date();
      currentAssignment.revokedBy = userId;
      currentAssignment.revokedReason = reasons;
    }

    // C·∫≠p nh·∫≠t phone
    phone.assigned = [];
    phone.status = status;

    const updatedPhone = await phone.save();

    // Populate th√¥ng tin tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const populatedPhone = await Phone.findById(updatedPhone._id)
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    res.status(200).json({
      message: "Thu h·ªìi ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: populatedPhone
    });
  } catch (error) {
    console.error("Error revoking phone:", error);
    res.status(500).json({
      message: "L·ªói khi thu h·ªìi ƒëi·ªán tho·∫°i",
      error: error.message
    });
  }
};

// Update phone status
exports.updatePhoneStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, brokenReason } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    const updateData = { status };
    if (status === "Broken") {
      if (!brokenReason) {
        return res.status(400).json({ 
          message: "L√Ω do b√°o h·ªèng l√† b·∫Øt bu·ªôc khi tr·∫°ng th√°i l√† 'Broken'!" 
        });
      }
      updateData.brokenReason = brokenReason;
    } else {
      updateData.brokenReason = null;
    }

    const updatedPhone = await Phone.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    )
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    if (!updatedPhone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: updatedPhone
    });
  } catch (error) {
    console.error("Error updating phone status:", error);
    res.status(500).json({
      message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëi·ªán tho·∫°i",
      error: error.message
    });
  }
};

// Update phone specs
exports.updatePhoneSpecs = async (req, res) => {
  try {
    const { id } = req.params;
    const { specs } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" });
    }

    if (!specs || typeof specs !== "object") {
      return res.status(400).json({ message: "Th√¥ng tin specs kh√¥ng h·ª£p l·ªá!" });
    }

    const updatedPhone = await Phone.findByIdAndUpdate(
      id,
      { specs },
      { new: true }
    )
      .populate("assigned", "fullname email jobTitle avatarUrl department")
      .populate("room", "name location status");

    if (!updatedPhone) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i!" });
    }

    // X√≥a cache
    await redisService.clearDeviceCache('phone');

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t th√¥ng s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      phone: updatedPhone
    });
  } catch (error) {
    console.error("Error updating phone specs:", error);
    res.status(500).json({
      message: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng s·ªë ƒëi·ªán tho·∫°i",
      error: error.message
    });
  }
}; 