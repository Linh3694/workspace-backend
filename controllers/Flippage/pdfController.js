// controllers/pdfController.js
const Pdf = require("../../models/Pdf");
const { convertPdfToImages } = require("../../utils/convertPdfToImages");
const fs = require("fs");
const path = require("path");
const viewCache = {};

// routes/flippage.js
exports.checkCustomeNameUrl = async (req, res) => {
  const { customName } = req.params;
  
  try {
    const fileExists = await Pdf.exists({ customName }); // ‚úÖ S·ª≠a th√†nh Pdf.exists(...)
    if (!fileExists) {
      return res.status(404).json({ exists: false, message: "customName kh√¥ng t·ªìn t·∫°i" });
    }
    return res.json({ exists: true });
  } catch (error) {
    console.error("L·ªói ki·ªÉm tra customName:", error);
    return res.status(500).json({ exists: false, error: "L·ªói server" });
  }
};


exports.checkCustomName = async (req, res) => {
  try {
    const { customName } = req.params;

    if (!customName || customName.trim() === "") {
      return res.status(400).json({ message: "ƒê∆∞·ªùng d·∫´n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.", valid: false });
    }

    const sanitizedCustomName = customName
      .trim()
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/\s+/g, "-");

    const existingPdf = await Pdf.findOne({ customName: sanitizedCustomName });

    if (existingPdf) {
      return res.status(400).json({ message: "ƒê∆∞·ªùng d·∫´n ƒë√£ t·ªìn t·∫°i.", valid: false });
    }

    res.json({ message: "ƒê∆∞·ªùng d·∫´n h·ª£p l·ªá", valid: true });
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra customName:", err);
    res.status(500).json({ message: "L·ªói server", valid: false });
  }
};

function decodeAndNormalizeFileName(str) {
  if (!str) return "";
  const decoded = Buffer.from(str, "latin1").toString("utf8");
  // N·∫øu k·∫øt qu·∫£ gi·∫£i m√£ ch·ª©a k√Ω t·ª± thay th·∫ø "ÔøΩ", tr·∫£ v·ªÅ chu·ªói g·ªëc (gi·∫£ s·ª≠ chu·ªói ƒë√≥ ƒë√£ ƒë∆∞·ª£c fix)
  if (decoded.includes("ÔøΩ")) {
    return str;
  }
  return decoded.normalize("NFC");
}
exports.fixAllFileNames = async (req, res) => {
  try {
    // L·∫•y t·∫•t c·∫£ PDF
    const pdfs = await Pdf.find();

    let countFixed = 0;

    for (const pdf of pdfs) {
      const original = pdf.fileName;
      // Th·ª≠ gi·∫£i m√£ & normalize
      const fixed = decodeAndNormalizeFileName(original);

      // N·∫øu t√™n m·ªõi kh√°c t√™n c≈©, c·∫≠p nh·∫≠t
      if (fixed !== original) {
        pdf.fileName = fixed;
        await pdf.save();
        countFixed++;
      }
    }

    return res.json({
      message: `ƒê√£ ki·ªÉm tra ${pdfs.length} file. ƒê√£ s·ª≠a ${countFixed} t√™n file b·ªã l·ªói.`,
    });
  } catch (err) {
    console.error("‚ùå L·ªói fixAllFileNames:", err);
    return res.status(500).json({ error: "L·ªói server khi s·ª≠a t√™n file." });
  }
};

exports.fixMissingViews = async (req, res) => {
  try {
    // Update t·∫•t c·∫£ c√°c PDF m√† ch∆∞a c√≥ tr∆∞·ªùng clickCount (ho·∫∑c tr∆∞·ªùng n√†y kh√¥ng t·ªìn t·∫°i)
    const result = await Pdf.updateMany(
      { clickCount: { $exists: false } },
      { $set: { clickCount: 0 } }
    );
    return res.json({
      message: `ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount || result.nModified} t√†i li·ªáu, th√™m tr∆∞·ªùng clickCount.`,
    });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t views:", error);
    return res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t views." });
  }
};

exports.uploadPdf = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No PDF file uploaded." });
    }

    // ƒê∆∞·ªùng d·∫´n file PDF ƒë√£ l∆∞u (Multer ƒë√£ l∆∞u v·ªõi t√™n l√†: <timestamp>-<originalname>)
    const pdfFilePath = req.file.path;
    const folderName = path.basename(pdfFilePath, path.extname(pdfFilePath));

    // L·∫•y uploader t·ª´ req.user (ƒë·∫£m b·∫£o middleware auth ƒë√£ g·∫Øn req.user)
    const uploaderId = req.user?._id;
    if (!uploaderId) {
      return res.status(400).json({ error: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi t·∫£i l√™n." });
    }

    // L·∫•y bookmarks t·ª´ body n·∫øu c√≥ (JSON string)
    const bookmarks = req.body.bookmarks ? JSON.parse(req.body.bookmarks) : [];
    console.log("Bookmarks:", bookmarks);

    // X·ª≠ l√Ω customName: normalize, lo·∫°i b·ªè d·∫•u v√† chuy·ªÉn kho·∫£ng tr·∫Øng th√†nh d·∫•u g·∫°ch ngang
    let customName = req.body.customName
      ?.trim()
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/\s+/g, "-") || folderName;

    // Ki·ªÉm tra tr√πng l·∫∑p customName trong DB
    const existingPdf = await Pdf.findOne({ customName });
    if (existingPdf) {
      return res.status(400).json({ error: `File v·ªõi customName "${customName}" ƒë√£ t·ªìn t·∫°i! H√£y ch·ªçn t√™n kh√°c.` });
    }

    // Convert PDF -> ·∫¢nh (s·ª≠ d·ª•ng h√†m convertPdfToImages, truy·ªÅn folderName ƒë·ªÉ l∆∞u ·∫£nh)
    await convertPdfToImages(pdfFilePath, folderName, 150);

    console.log("originalName:", req.file.originalname);
    const fixedFileName = decodeAndNormalizeFileName(req.file.originalname);
    console.log("fixedFileName:", fixedFileName);

    // T·∫°o m·ªõi ƒë·ªëi t∆∞·ª£ng Pdf v√† l∆∞u v√†o MongoDB
    const newPdf = new Pdf({
      fileName: fixedFileName,
      customName,
      folderName,
      uploader: uploaderId,
      active: true,
      bookmarks, // L∆∞u danh s√°ch bookmarks n·∫øu c√≥
    });

    await newPdf.save();
    res.json({ folderName, customName });
  } catch (err) {
    console.error("‚ùå Error converting PDF:", err);
    res.status(500).json({ error: "L·ªói convert PDF" });
  }
};

exports.getImages = async (req, res) => {
  try {
    const { customName } = req.params;
    console.log("üîç API nh·∫≠n customName:", customName);
    
    // T√¨m PDF trong DB
    const pdfData = await Pdf.findOne({ customName });
    if (!pdfData) {
      return res.status(404).json({
        error: `Kh√¥ng t√¨m th·∫•y PDF v·ªõi customName: "${customName}"`,
      });
    }
    console.log("üìÇ Folder name trong DB:", pdfData.folderName);

    // Ki·ªÉm tra tr·∫°ng th√°i active
    if (!pdfData.active) {
      return res.status(403).json({ error: "T√†i li·ªáu n√†y ƒë√£ b·ªã v√¥ hi·ªáu h√≥a." });
    }

    // L·∫•y IP c·ªßa client (n·∫øu c√≥ proxy, s·ª≠ d·ª•ng header x-forwarded-for)
    const clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.ip;
    const cacheKey = `${clientIp}-${customName}`;
    const now = Date.now();
    const threshold = 60 * 1000; // 60 gi√¢y

    // N·∫øu ch∆∞a c√≥ key trong cache ho·∫∑c th·ªùi gian ƒë√£ v∆∞·ª£t qu√° threshold, tƒÉng clickCount
    if (!viewCache[cacheKey] || now - viewCache[cacheKey] > threshold) {
      viewCache[cacheKey] = now;
      pdfData.clickCount = (pdfData.clickCount || 0) + 1;
      await pdfData.save();
    }

    // X√°c ƒë·ªãnh th∆∞ m·ª•c ch·ª©a ·∫£nh PDF
    const imageDir = path.join(__dirname, "..", "..", "public", "uploads", "pdf-images");
    if (!fs.existsSync(imageDir)) {
      return res.status(404).json({
        error: `Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh cho PDF "${customName}"`,
      });
    }

    // L·ªçc c√°c file ·∫£nh .png b·∫Øt ƒë·∫ßu v·ªõi folderName
    const allFiles = fs.readdirSync(imageDir);
    const imageFiles = allFiles.filter(
      (file) =>
        file.startsWith(pdfData.folderName) && file.endsWith(".png")
    );
    if (imageFiles.length === 0) {
      return res.status(404).json({
        error: `Kh√¥ng t√¨m th·∫•y ·∫£nh cho PDF "${customName}"`,
      });
    }

    // T·∫°o URL cho c√°c ·∫£nh
    const imageUrls = imageFiles.map((file) => {
      return `${req.protocol}://${req.get("host")}/uploads/pdf-images/${file}`;
    });

    res.json({ images: imageUrls });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y ·∫£nh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y ·∫£nh." });
  }
};

exports.getAllPdfs = async (req, res) => {
  try {
    const pdfs = await Pdf.find()
      .populate("uploader", "fullname email avatarUrl") // üî• L·∫•y th√¥ng tin User
      .sort({ uploadDate: -1 });
    res.json(
      pdfs.map((pdf) => ({
        _id: pdf._id,
        fileName: pdf.fileName,
        customName: pdf.customName,
        folderName: pdf.folderName,
        bookmarks: pdf.bookmarks,        // <-- th√™m d√≤ng n√†y
        uploader: pdf.uploader
          ? {
              _id: pdf.uploader._id,
              fullname: pdf.uploader.fullname,
              email: pdf.uploader.email,
              avatar: pdf.uploader.avatarUrl
                ? `${pdf.uploader.avatarUrl}`
                : "",
            }
          : null,
        active: pdf.active,
        uploadDate: new Date(pdf.uploadDate).toLocaleString(),
        clickCount : pdf.clickCount,
      }))
    );
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch PDF:", err);
    res.status(500).json({ error: "L·ªói khi t·∫£i danh s√°ch file." });
  }
};

exports.updatePdf = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      newCustomName,   // N·∫øu mu·ªën c·∫≠p nh·∫≠t customName
      bookmarks,       // N·∫øu mu·ªën c·∫≠p nh·∫≠t bookmarks
      active,          // N·∫øu mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i active
      ...otherFields   // C√°c tr∆∞·ªùng kh√°c, n·∫øu c√≥
    } = req.body;

    // T·∫°o ƒë·ªëi t∆∞·ª£ng ch·ª©a d·ªØ li·ªáu c·∫ßn update
    const updateData = { ...otherFields };

    // 1) N·∫øu c√≥ truy·ªÅn newCustomName -> chu·∫©n h√≥a & ki·ªÉm tra tr√πng
    if (newCustomName && newCustomName.trim() !== "") {
      const sanitizedCustomName = newCustomName
        .trim()
        .toLowerCase()
        .normalize("NFD") // Lo·∫°i b·ªè d·∫•u Ti·∫øng Vi·ªát
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/\s+/g, "-");

      // Ki·ªÉm tra tr√πng l·∫∑p
      const existingPdf = await Pdf.findOne({ customName: sanitizedCustomName });
      if (existingPdf && existingPdf._id.toString() !== id) {
        return res.status(400).json({
          error: `CustomName "${sanitizedCustomName}" ƒë√£ t·ªìn t·∫°i!`,
        });
      }

      // Th√™m v√†o updateData
      updateData.customName = sanitizedCustomName;
    }

    // 2) N·∫øu c√≥ bookmarks -> c·∫≠p nh·∫≠t
    if (Array.isArray(bookmarks)) {
      updateData.bookmarks = bookmarks;
    }

    // 3) N·∫øu c√≥ active -> c·∫≠p nh·∫≠t
    // (C√≥ th·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu boolean n·∫øu c·∫ßn)
    if (typeof active !== "undefined") {
      updateData.active = active;
    }

    // 4) Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    const updatedPdf = await Pdf.findByIdAndUpdate(id, updateData, {
      new: true, // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
    });

    if (!updatedPdf) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t." });
    }

    // 5) Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.json({
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
      updatedPdf,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t PDF:", err);
    return res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t PDF." });
  }
};

exports.deletePdf = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Ki·ªÉm tra xem t√†i li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
    const pdfData = await Pdf.findById(id);
    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu." });
    }

    // ‚ùå N·∫øu mu·ªën x√≥a vƒ©nh vi·ªÖn:
    // await Pdf.findByIdAndDelete(id);

    // ‚úÖ N·∫øu mu·ªën "x√≥a m·ªÅm" (disable file)
    pdfData.active = false;
    await pdfData.save();

    res.json({ message: "T√†i li·ªáu ƒë√£ b·ªã v√¥ hi·ªáu h√≥a!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a t√†i li·ªáu:", err);
    res.status(500).json({ error: "L·ªói server khi x√≥a t√†i li·ªáu." });
  }
};

exports.permanentlyDeletePdf = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra xem t√†i li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
    const pdfData = await Pdf.findById(id);
    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu." });
    }

    // Xo√° c√°c file ·∫£nh li√™n quan
    const imageDir = path.join(__dirname, "..", "..", "public", "uploads", "pdf-images");
    const imageFiles = fs.readdirSync(imageDir).filter((file) => file.startsWith(pdfData.folderName));
    imageFiles.forEach((file) => fs.unlinkSync(path.join(imageDir, file)));

    // Xo√° PDF kh·ªèi DB
    await Pdf.findByIdAndDelete(id);

    res.json({ message: "T√†i li·ªáu ƒë√£ b·ªã x√≥a vƒ©nh vi·ªÖn!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a vƒ©nh vi·ªÖn t√†i li·ªáu:", err);
    res.status(500).json({ error: "L·ªói server khi x√≥a t√†i li·ªáu." });
  }
};

exports.toggleActiveStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { active } = req.body;

    // Ki·ªÉm tra n·∫øu t√†i li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
    const pdf = await Pdf.findById(id);
    if (!pdf) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu." });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active
    pdf.active = active;
    await pdf.save();

    res.json({ message: `Tr·∫°ng th√°i c·∫≠p nh·∫≠t th√†nh c√¥ng!`, active: pdf.active });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i." });
  }
};

exports.getBookmarks = async (req, res) => {
  try {
    const { customName } = req.params;
    const pdfData = await Pdf.findOne({ customName });

    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu." });
    }

    res.json({ bookmarks: pdfData.bookmarks });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y bookmarks:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y bookmarks." });
  }
};

exports.updateBookmarks = async (req, res) => {
  try {
    const { id } = req.params;
    const { bookmarks } = req.body;

    if (!Array.isArray(bookmarks)) {
      return res.status(400).json({ error: "Bookmarks ph·∫£i l√† m·ªôt m·∫£ng." });
    }

    const pdfData = await Pdf.findByIdAndUpdate(
      id,
      { bookmarks },
      { new: true }
    );

    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t." });
    }

    res.json({ message: "C·∫≠p nh·∫≠t bookmarks th√†nh c√¥ng!", bookmarks: pdfData.bookmarks });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t bookmarks:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t bookmarks." });
  }
};  

exports.getPdfStatus = async (req, res) => {
  const { customName } = req.params;
  try {
    const pdfData = await Pdf.findOne({ customName });
    if (!pdfData) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y PDF", active: false });
    }
    return res.json({ active: pdfData.active });
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i PDF:", error);
    return res.status(500).json({ error: "L·ªói server", active: false });
  }
};