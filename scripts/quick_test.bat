@echo off
setlocal enabledelayedexpansion
REM Batch script ƒë·ªÉ test nhanh v√† debug

echo ========================================
echo     TEST NHANH H·ªÜ TH·ªêNG
echo ========================================

REM Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c scripts
cd /d "%~dp0"

echo.
echo Ch·ªçn test:
echo 1. Test ƒë·ªìng b·ªô m·ªôt l·∫ßn (t·∫°o log)
echo 2. Ki·ªÉm tra th∆∞ m·ª•c v√† files
echo 3. Test k·∫øt n·ªëi virtual environment  
echo 4. Xem logs hi·ªán c√≥
echo 5. D·ªçn d·∫πp logs c≈©
echo.
set /p choice="Nh·∫≠p l·ª±a ch·ªçn (1-5): "

if "%choice%"=="1" (
    echo.
    echo üß™ TEST ƒê·ªíNG B·ªò M·ªòT L·∫¶N...
    
    REM Ki·ªÉm tra virtual environment
    if not exist "venv\Scripts\activate.bat" (
        echo ‚ùå Virtual environment ch∆∞a ƒë∆∞·ª£c t·∫°o
        echo üí° Ch·∫°y setup.bat tr∆∞·ªõc
        pause
        exit /b 1
    )
    
    echo K√≠ch ho·∫°t virtual environment...
    call venv\Scripts\activate.bat
    
    echo T·∫°o th∆∞ m·ª•c logs...
    if not exist "logs" mkdir logs
    if not exist "logs\auto_sync" mkdir logs\auto_sync
    
    echo Ch·∫°y ƒë·ªìng b·ªô test...
    python sync_all_devices.py --config-dir ./ --backend-url https://api-dev.wellspring.edu.vn --output logs\auto_sync\test_sync.json
    
    if errorlevel 1 (
        echo ‚ùå Test th·∫•t b·∫°i
    ) else (
        echo ‚úÖ Test th√†nh c√¥ng!
        echo üìÑ Log ƒë∆∞·ª£c t·∫°o: logs\auto_sync\test_sync.json
        
        if exist "logs\auto_sync\test_sync.json" (
            echo.
            echo üìä K·∫øt qu·∫£ test:
            python -c "
import json
try:
    with open('logs/auto_sync/test_sync.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    print(f'‚úÖ Th√†nh c√¥ng: {data.get(\"successful_devices\", 0)}/{data.get(\"total_devices\", 0)} thi·∫øt b·ªã')
    print(f'‚ùå Th·∫•t b·∫°i: {data.get(\"failed_devices\", 0)} thi·∫øt b·ªã') 
    print(f'‚è±Ô∏è Th·ªùi gian: {data.get(\"duration_seconds\", 0):.1f} gi√¢y')
    print(f'üìÅ Records: {data.get(\"total_records_processed\", 0)}')
except Exception as e:
    print(f'‚ö†Ô∏è L·ªói ƒë·ªçc k·∫øt qu·∫£: {e}')
"
        )
    )
    
) else if "%choice%"=="2" (
    echo.
    echo üîç KI·ªÇM TRA TH∆Ø M·ª§C V√Ä FILES...
    
    echo Th∆∞ m·ª•c hi·ªán t·∫°i: %CD%
    echo.
    
    echo üìÇ Ki·ªÉm tra virtual environment:
    if exist "venv" (
        echo ‚úÖ Th∆∞ m·ª•c venv t·ªìn t·∫°i
        if exist "venv\Scripts\activate.bat" (
            echo ‚úÖ activate.bat t·ªìn t·∫°i
        ) else (
            echo ‚ùå activate.bat kh√¥ng t·ªìn t·∫°i
        )
    ) else (
        echo ‚ùå Th∆∞ m·ª•c venv kh√¥ng t·ªìn t·∫°i
    )
    
    echo.
    echo üìÇ Ki·ªÉm tra logs:
    if exist "logs" (
        echo ‚úÖ Th∆∞ m·ª•c logs t·ªìn t·∫°i
        if exist "logs\auto_sync" (
            echo ‚úÖ Th∆∞ m·ª•c logs\auto_sync t·ªìn t·∫°i
            
            set log_count=0
            for %%f in ("logs\auto_sync\*.json") do set /a log_count+=1
            echo üìÑ S·ªë file log: !log_count!
            
            if !log_count! gtr 0 (
                echo üìã Danh s√°ch logs:
                dir "logs\auto_sync\*.json" /b /o-d
            )
        ) else (
            echo ‚ùå Th∆∞ m·ª•c logs\auto_sync kh√¥ng t·ªìn t·∫°i
        )
    ) else (
        echo ‚ùå Th∆∞ m·ª•c logs kh√¥ng t·ªìn t·∫°i
    )
    
    echo.
    echo üìÇ Ki·ªÉm tra files scripts:
    echo ‚úÖ auto_sync.bat: & if exist "auto_sync.bat" (echo T·ªìn t·∫°i) else (echo Kh√¥ng t·ªìn t·∫°i)
    echo ‚úÖ service_sync.bat: & if exist "service_sync.bat" (echo T·ªìn t·∫°i) else (echo Kh√¥ng t·ªìn t·∫°i)
    echo ‚úÖ sync_all_devices.py: & if exist "sync_all_devices.py" (echo T·ªìn t·∫°i) else (echo Kh√¥ng t·ªìn t·∫°i)
    
) else if "%choice%"=="3" (
    echo.
    echo üîç TEST VIRTUAL ENVIRONMENT...
    
    if not exist "venv\Scripts\activate.bat" (
        echo ‚ùå Virtual environment ch∆∞a ƒë∆∞·ª£c t·∫°o
        echo üí° Ch·∫°y setup.bat ƒë·ªÉ t·∫°o
        goto :eof
    )
    
    echo K√≠ch ho·∫°t virtual environment...
    call venv\Scripts\activate.bat
    
    echo Test Python:
    python --version
    
    echo.
    echo Test c√°c package:
    python -c "
try:
    import requests
    print('‚úÖ requests OK')
except ImportError:
    print('‚ùå requests missing')

try:
    import json
    print('‚úÖ json OK')
except ImportError:
    print('‚ùå json missing')
    
try:
    import configparser
    print('‚úÖ configparser OK')  
except ImportError:
    print('‚ùå configparser missing')
"
    
) else if "%choice%"=="4" (
    echo.
    echo üìã XEM LOGS HI·ªÜN C√ì...
    
    if not exist "logs\auto_sync" (
        echo ‚ùå Th∆∞ m·ª•c logs\auto_sync kh√¥ng t·ªìn t·∫°i
        echo üí° Ch·∫°y option 1 ƒë·ªÉ t·∫°o test log
        goto :eof
    )
    
    set log_count=0
    for %%f in ("logs\auto_sync\*.json") do set /a log_count+=1
    
    if %log_count%==0 (
        echo ‚ö†Ô∏è Kh√¥ng c√≥ log files
        echo üìÇ Th∆∞ m·ª•c t·ªìn t·∫°i nh∆∞ng tr·ªëng
        dir "logs\auto_sync" /a
    ) else (
        echo ‚úÖ T√¨m th·∫•y %log_count% log files:
        echo.
        
        for /f %%i in ('dir "logs\auto_sync\*.json" /b /o-d') do (
            echo üìÑ %%i
            python -c "
import json, os
try:
    with open('logs/auto_sync/%%i', 'r', encoding='utf-8') as f:
        data = json.load(f)
    start_time = data.get('start_time', 'Unknown')[:19].replace('T', ' ')
    success = data.get('successful_devices', 0)
    total = data.get('total_devices', 0)
    print(f'   üìÖ {start_time} | ‚úÖ {success}/{total} thi·∫øt b·ªã')
except:
    print('   ‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file')
" 2>nul
            echo.
        )
    )
    
) else if "%choice%"=="5" (
    echo.
    echo üßπ D·ªåN D·∫∏P LOGS C≈®...
    
    if exist "logs\auto_sync\*.json" (
        set /p confirm="X√≥a t·∫•t c·∫£ log files? (y/N): "
        if /i "!confirm!"=="y" (
            del "logs\auto_sync\*.json" /q
            echo ‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ log files
        ) else (
            echo ‚ùå H·ªßy b·ªè
        )
    ) else (
        echo ‚ö†Ô∏è Kh√¥ng c√≥ log files ƒë·ªÉ x√≥a
    )
    
) else (
    echo L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá
)

echo.
echo üí° G·ª£i √Ω ti·∫øp theo:
echo - N·∫øu logs tr·ªëng: Ch·∫°y option 1 ƒë·ªÉ t·∫°o test log
echo - Sau ƒë√≥ test: service_sync.bat option 7
echo - Ho·∫∑c kh·ªüi ch·∫°y auto: service_sync.bat option 1
echo.
pause 