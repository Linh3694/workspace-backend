#!/usr/bin/env python3
"""
Script ƒë·ªìng b·ªô d·ªØ li·ªáu ch·∫•m c√¥ng t·ª´ nhi·ªÅu m√°y HIKVISION
S·ª≠ d·ª•ng ƒë·ªÉ ch·∫°y ƒë·ªìng b·ªô t·ª± ƒë·ªông ho·∫∑c manual cho t·∫•t c·∫£ c√°c m√°y ch·∫•m c√¥ng
"""

import os
import sys
import json
import logging
import argparse
import asyncio
import concurrent.futures
from datetime import datetime, timedelta
from pathlib import Path
import glob
import time
import threading
from typing import Dict, List, Optional

# Import client t·ª´ script ch√≠nh
from hikvision_client import HikvisionAttendanceClient

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sync_all_devices.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CircuitBreaker:
    """Circuit Breaker pattern ƒë·ªÉ tr√°nh spam thi·∫øt b·ªã l·ªói"""
    
    def __init__(self, failure_threshold: int = 3, recovery_timeout: int = 300):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.failure_count = 0
        self.last_failure_time = None
        self.state = 'CLOSED'  # CLOSED, OPEN, HALF_OPEN
        self.lock = threading.Lock()
    
    def call(self, func, *args, **kwargs):
        """Th·ª±c hi·ªán function call v·ªõi circuit breaker logic"""
        with self.lock:
            if self.state == 'OPEN':
                if self._should_attempt_reset():
                    self.state = 'HALF_OPEN'
                else:
                    raise Exception(f"Circuit breaker OPEN, thi·∫øt b·ªã b·ªã t·∫°m d·ª´ng ƒë·∫øn {self.last_failure_time + timedelta(seconds=self.recovery_timeout)}")
        
        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result
        except Exception as e:
            self._on_failure()
            raise
    
    def _should_attempt_reset(self) -> bool:
        """Ki·ªÉm tra c√≥ n√™n th·ª≠ reset circuit breaker kh√¥ng"""
        return (self.last_failure_time and 
                datetime.now() - self.last_failure_time >= timedelta(seconds=self.recovery_timeout))
    
    def _on_success(self):
        """X·ª≠ l√Ω khi function call th√†nh c√¥ng"""
        with self.lock:
            self.failure_count = 0
            self.state = 'CLOSED'
    
    def _on_failure(self):
        """X·ª≠ l√Ω khi function call th·∫•t b·∫°i"""
        with self.lock:
            self.failure_count += 1
            self.last_failure_time = datetime.now()
            if self.failure_count >= self.failure_threshold:
                self.state = 'OPEN'
                logger.warning(f"Circuit breaker OPEN sau {self.failure_count} l·ªói li√™n ti·∫øp")

class MultiDeviceSyncer:
    """Class ƒë·ªÉ ƒë·ªìng b·ªô nhi·ªÅu m√°y ch·∫•m c√¥ng c√πng l√∫c v·ªõi c·∫£i thi·ªán timeout handling"""
    
    def __init__(self, config_dir: str, backend_url: str = "http://localhost:3000", max_workers: int = 3):
        """
        Kh·ªüi t·∫°o syncer
        
        Args:
            config_dir: Th∆∞ m·ª•c ch·ª©a c√°c file config
            backend_url: URL c·ªßa backend API
            max_workers: S·ªë l∆∞·ª£ng thread t·ªëi ƒëa ƒë·ªÉ x·ª≠ l√Ω ƒë·ªìng th·ªùi (gi·∫£m xu·ªëng ƒë·ªÉ tr√°nh overload)
        """
        self.config_dir = Path(config_dir)
        self.backend_url = backend_url
        self.max_workers = min(max_workers, 3)  # Gi·ªõi h·∫°n t·ªëi ƒëa 3 workers
        self.results = []
        self.circuit_breakers = {}  # Circuit breaker cho m·ªói thi·∫øt b·ªã
        self.device_timeouts = {}   # Track timeout cho m·ªói thi·∫øt b·ªã
        
        logger.info(f"Kh·ªüi t·∫°o MultiDeviceSyncer v·ªõi {self.max_workers} workers")

    def find_config_files(self) -> list:
        """T√¨m t·∫•t c·∫£ c√°c file config trong th∆∞ m·ª•c"""
        patterns = ['*.txt', '*.ini', '*.conf', '*.cfg']
        config_files = []
        
        for pattern in patterns:
            config_files.extend(glob.glob(str(self.config_dir / pattern)))
        
        # L·ªçc b·ªè c√°c file kh√¥ng ph·∫£i config
        filtered_files = []
        for file_path in config_files:
            filename = os.path.basename(file_path).lower()
            if any(keyword in filename for keyword in ['credentials', 'config', 'device']):
                filtered_files.append(file_path)
        
        logger.info(f"T√¨m th·∫•y {len(filtered_files)} file config: {[os.path.basename(f) for f in filtered_files]}")
        return filtered_files

    def sync_single_device(self, config_file: str, start_date: str = None, end_date: str = None, timeout_minutes: int = 30) -> dict:
        """
        ƒê·ªìng b·ªô m·ªôt m√°y ch·∫•m c√¥ng ƒë∆°n l·∫ª v·ªõi timeout handling ƒë∆∞·ª£c c·∫£i thi·ªán
        
        Args:
            config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file config
            start_date: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
            end_date: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
            timeout_minutes: Timeout cho to√†n b·ªô qu√° tr√¨nh sync (ph√∫t)
            
        Returns:
            K·∫øt qu·∫£ ƒë·ªìng b·ªô
        """
        device_name = os.path.basename(config_file)
        start_time = datetime.now()
        
        # Kh·ªüi t·∫°o circuit breaker cho thi·∫øt b·ªã n·∫øu ch∆∞a c√≥
        if device_name not in self.circuit_breakers:
            self.circuit_breakers[device_name] = CircuitBreaker(
                failure_threshold=2,  # Gi·∫£m threshold ƒë·ªÉ ph√°t hi·ªán l·ªói s·ªõm h∆°n
                recovery_timeout=600  # 10 ph√∫t recovery time
            )
        
        circuit_breaker = self.circuit_breakers[device_name]
        
        def _do_sync():
            """H√†m th·ª±c hi·ªán sync th·ª±c t·∫ø"""
            try:
                logger.info(f"üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô cho {device_name}")
                
                # T·∫°o client v·ªõi timeout c·∫£i thi·ªán
                client = HikvisionAttendanceClient(config_file, self.backend_url)
                
                # Th·ª±c hi·ªán ƒë·ªìng b·ªô
                result = client.sync_attendance(start_date, end_date)
                
                # Th√™m th√¥ng tin thi·∫øt b·ªã v√†o k·∫øt qu·∫£
                result['device_name'] = device_name
                result['config_file'] = config_file
                result['sync_time'] = datetime.now().isoformat()
                result['duration_seconds'] = (datetime.now() - start_time).total_seconds()
                
                if result.get('status') == 'success':
                    logger.info(f"‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng cho {device_name} trong {result['duration_seconds']:.1f}s: {result.get('message', '')}")
                else:
                    logger.error(f"‚ùå ƒê·ªìng b·ªô th·∫•t b·∫°i cho {device_name}: {result.get('message', '')}")
                
                return result
                
            except Exception as e:
                error_result = {
                    'status': 'error',
                    'message': str(e),
                    'device_name': device_name,
                    'config_file': config_file,
                    'sync_time': datetime.now().isoformat(),
                    'duration_seconds': (datetime.now() - start_time).total_seconds()
                }
                logger.error(f"‚ùå L·ªói ƒë·ªìng b·ªô {device_name}: {e}")
                raise Exception(str(e))
        
        try:
            # S·ª≠ d·ª•ng circuit breaker v√† timeout
            def timeout_wrapper():
                return circuit_breaker.call(_do_sync)
            
            # Th·ª±c hi·ªán v·ªõi timeout
            with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
                future = executor.submit(timeout_wrapper)
                try:
                    result = future.result(timeout=timeout_minutes * 60)  # Convert to seconds
                    return result
                except concurrent.futures.TimeoutError:
                    future.cancel()
                    timeout_result = {
                        'status': 'timeout',
                        'message': f'Timeout sau {timeout_minutes} ph√∫t',
                        'device_name': device_name,
                        'config_file': config_file,
                        'sync_time': datetime.now().isoformat(),
                        'duration_seconds': timeout_minutes * 60
                    }
                    logger.error(f"‚è∞ Timeout ƒë·ªìng b·ªô {device_name} sau {timeout_minutes} ph√∫t")
                    
                    # Ghi nh·∫≠n timeout cho thi·∫øt b·ªã
                    self.device_timeouts[device_name] = self.device_timeouts.get(device_name, 0) + 1
                    
                    return timeout_result
                    
        except Exception as e:
            # Circuit breaker ƒë√£ b·∫≠t ho·∫∑c c√≥ l·ªói kh√°c
            error_result = {
                'status': 'error',
                'message': str(e),
                'device_name': device_name,
                'config_file': config_file,
                'sync_time': datetime.now().isoformat(),
                'duration_seconds': (datetime.now() - start_time).total_seconds()
            }
            return error_result

    def sync_all_devices(self, start_date: str = None, end_date: str = None, device_timeout_minutes: int = 20) -> dict:
        """
        ƒê·ªìng b·ªô t·∫•t c·∫£ c√°c m√°y ch·∫•m c√¥ng v·ªõi improved timeout v√† error handling
        
        Args:
            start_date: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
            end_date: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
            device_timeout_minutes: Timeout cho m·ªói thi·∫øt b·ªã (ph√∫t)
            
        Returns:
            T·ªïng h·ª£p k·∫øt qu·∫£ ƒë·ªìng b·ªô
        """
        config_files = self.find_config_files()
        
        if not config_files:
            return {
                'status': 'error',
                'message': f'Kh√¥ng t√¨m th·∫•y file config n√†o trong th∆∞ m·ª•c {self.config_dir}',
                'results': []
            }
        
        # S·∫Øp x·∫øp thi·∫øt b·ªã theo l·ªãch s·ª≠ timeout (thi·∫øt b·ªã √≠t timeout sync tr∆∞·ªõc)
        sorted_devices = sorted(config_files, key=lambda x: self.device_timeouts.get(os.path.basename(x), 0))
        
        start_time = datetime.now()
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô {len(sorted_devices)} thi·∫øt b·ªã (timeout: {device_timeout_minutes}m/thi·∫øt b·ªã)...")
        
        # Gi·∫£m s·ªë workers v√† th√™m staggered start
        effective_workers = min(self.max_workers, len(sorted_devices))
        
        # S·ª≠ d·ª•ng ThreadPoolExecutor v·ªõi timeout c·∫£i thi·ªán
        with concurrent.futures.ThreadPoolExecutor(max_workers=effective_workers) as executor:
            # Submit tasks v·ªõi delay nh·ªè ƒë·ªÉ tr√°nh ƒë·ªìng lo·∫°t connect
            future_to_config = {}
            
            for i, config_file in enumerate(sorted_devices):
                # Stagger start time ƒë·ªÉ tr√°nh overload
                if i > 0:
                    time.sleep(2)  # 2 gi√¢y delay gi·ªØa c√°c submission
                
                future = executor.submit(
                    self.sync_single_device, 
                    config_file, 
                    start_date, 
                    end_date,
                    device_timeout_minutes
                )
                future_to_config[future] = config_file
            
            # Collect results v·ªõi progress tracking
            results = []
            completed = 0
            
            for future in concurrent.futures.as_completed(future_to_config, timeout=len(sorted_devices) * device_timeout_minutes * 60 + 300):
                config_file = future_to_config[future]
                completed += 1
                
                try:
                    result = future.result(timeout=5)  # Short timeout v√¨ ƒë√£ c√≥ timeout trong function
                    results.append(result)
                    
                    # Progress log
                    logger.info(f"üìä Ho√†n th√†nh {completed}/{len(sorted_devices)} thi·∫øt b·ªã")
                    
                except concurrent.futures.TimeoutError:
                    timeout_result = {
                        'status': 'timeout',
                        'message': 'Timeout khi l·∫•y k·∫øt qu·∫£',
                        'device_name': os.path.basename(config_file),
                        'config_file': config_file,
                        'sync_time': datetime.now().isoformat()
                    }
                    results.append(timeout_result)
                    logger.error(f"‚è∞ Timeout khi l·∫•y k·∫øt qu·∫£ cho {config_file}")
                    
                except Exception as exc:
                    error_result = {
                        'status': 'error',
                        'message': f'Exception: {exc}',
                        'device_name': os.path.basename(config_file),
                        'config_file': config_file,
                        'sync_time': datetime.now().isoformat()
                    }
                    results.append(error_result)
                    logger.error(f"‚ùå Exception cho {config_file}: {exc}")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # Th·ªëng k√™ k·∫øt qu·∫£ chi ti·∫øt
        successful = [r for r in results if r.get('status') == 'success']
        failed = [r for r in results if r.get('status') == 'error']
        timeout_devices = [r for r in results if r.get('status') == 'timeout']
        
        total_processed = sum(r.get('total_processed', 0) for r in successful)
        avg_duration = sum(r.get('duration_seconds', 0) for r in results) / len(results) if results else 0
        
        summary = {
            'status': 'completed',
            'total_devices': len(config_files),
            'successful_devices': len(successful),
            'failed_devices': len(failed),
            'timeout_devices': len(timeout_devices),
            'total_records_processed': total_processed,
            'duration_seconds': round(duration, 2),
            'average_device_duration': round(avg_duration, 2),
            'start_time': start_time.isoformat(),
            'end_time': end_time.isoformat(),
            'device_timeout_minutes': device_timeout_minutes,
            'results': results
        }
        
        logger.info(f"üèÅ Ho√†n th√†nh ƒë·ªìng b·ªô trong {duration:.2f}s (TB: {avg_duration:.1f}s/thi·∫øt b·ªã)")
        logger.info(f"‚úÖ Th√†nh c√¥ng: {len(successful)}/{len(config_files)} thi·∫øt b·ªã")
        logger.info(f"‚è∞ Timeout: {len(timeout_devices)} thi·∫øt b·ªã")
        logger.info(f"üìä T·ªïng records x·ª≠ l√Ω: {total_processed}")
        
        if timeout_devices:
            logger.warning(f"‚è∞ Thi·∫øt b·ªã timeout: {[r['device_name'] for r in timeout_devices]}")
        
        if failed:
            logger.warning(f"‚ùå Thi·∫øt b·ªã th·∫•t b·∫°i: {len(failed)}")
            for fail in failed[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 l·ªói ƒë·∫ßu ti√™n
                logger.warning(f"   - {fail.get('device_name', 'Unknown')}: {fail.get('message', 'Unknown error')[:100]}")
        
        return summary

    def sync_specific_devices(self, device_patterns: list, start_date: str = None, end_date: str = None, device_timeout_minutes: int = 20) -> dict:
        """
        ƒê·ªìng b·ªô c√°c thi·∫øt b·ªã c·ª• th·ªÉ theo pattern
        
        Args:
            device_patterns: List c√°c pattern t√™n file (c√≥ th·ªÉ d√πng wildcard)
            start_date: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
            end_date: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
            
        Returns:
            K·∫øt qu·∫£ ƒë·ªìng b·ªô
        """
        all_config_files = self.find_config_files()
        selected_files = []
        
        for pattern in device_patterns:
            for config_file in all_config_files:
                filename = os.path.basename(config_file)
                if pattern.lower() in filename.lower():
                    if config_file not in selected_files:
                        selected_files.append(config_file)
        
        if not selected_files:
            return {
                'status': 'error',
                'message': f'Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o kh·ªõp v·ªõi patterns: {device_patterns}',
                'results': []
            }
        
        logger.info(f"ƒê√£ ch·ªçn {len(selected_files)} thi·∫øt b·ªã ƒë·ªÉ ƒë·ªìng b·ªô")
        
        # Temporarily override config_files
        original_find_config_files = self.find_config_files
        self.find_config_files = lambda: selected_files
        
        try:
            result = self.sync_all_devices(start_date, end_date, device_timeout_minutes)
        finally:
            # Restore original method
            self.find_config_files = original_find_config_files
        
        return result

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='Multi-Device HIKVISION Attendance Syncer')
    parser.add_argument('--config-dir', required=True, help='Th∆∞ m·ª•c ch·ª©a c√°c file c·∫•u h√¨nh')
    parser.add_argument('--backend-url', default='http://localhost:3000', help='URL c·ªßa backend API')
    parser.add_argument('--start-date', help='Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)')
    parser.add_argument('--end-date', help='Ng√†y k·∫øt th√∫c (YYYY-MM-DD)')
    parser.add_argument('--devices', nargs='+', help='Ch·ªâ ƒë·ªìng b·ªô c√°c thi·∫øt b·ªã c·ª• th·ªÉ (patterns)')
    parser.add_argument('--max-workers', type=int, default=5, help='S·ªë l∆∞·ª£ng worker t·ªëi ƒëa')
    parser.add_argument('--device-timeout-minutes', type=int, default=20, help='Timeout cho m·ªói thi·∫øt b·ªã (ph√∫t)')
    parser.add_argument('--output', help='File ƒë·ªÉ l∆∞u k·∫øt qu·∫£ JSON')
    parser.add_argument('--verbose', '-v', action='store_true', help='B·∫≠t ch·∫ø ƒë·ªô verbose')
    parser.add_argument('--loop', action='store_true', help='Ch·∫°y li√™n t·ª•c t·ª´ng m√°y m·ªôt')
    parser.add_argument('--loop-interval-minutes', type=int, default=60, help='Kho·∫£ng ngh·ªâ gi·ªØa c√°c v√≤ng (ph√∫t)')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        # Kh·ªüi t·∫°o syncer
        syncer = MultiDeviceSyncer(args.config_dir, args.backend_url, args.max_workers)

        # Ch·∫°y tu·∫ßn t·ª± theo y√™u c·∫ßu --loop
        if args.loop:
            logger.info("üîÅ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ƒë·ªìng b·ªô li√™n t·ª•c t·ª´ng m√°y m·ªôt")
            config_list = args.devices and args.devices or None
            while True:
                if config_list:
                    result = syncer.sync_specific_devices(config_list, args.start_date, args.end_date, args.device_timeout_minutes)
                else:
                    # Ch·∫°y t·ª´ng m√°y m·ªôt b·∫±ng c√°ch thi·∫øt l·∫≠p max_workers=1 cho sequential
                    syncer.max_workers = 1
                    result = syncer.sync_all_devices(args.start_date, args.end_date, args.device_timeout_minutes)
                if args.output:
                    with open(args.output, 'w', encoding='utf-8') as f:
                        json.dump(result, f, indent=2, ensure_ascii=False)
                    logger.info(f"ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {args.output}")
                print(json.dumps(result, indent=2, ensure_ascii=False))
                logger.info(f"‚è∞ ƒê·ª£i {args.loop_interval_minutes} ph√∫t tr∆∞·ªõc khi ch·∫°y v√≤ng ti·∫øp theo...")
                time.sleep(args.loop_interval_minutes * 60)
        else:
            # Th·ª±c hi·ªán ƒë·ªìng b·ªô m·ªôt l·∫ßn
            if args.devices:
                result = syncer.sync_specific_devices(args.devices, args.start_date, args.end_date, args.device_timeout_minutes)
            else:
                result = syncer.sync_all_devices(args.start_date, args.end_date, args.device_timeout_minutes)

            if args.output:
                with open(args.output, 'w', encoding='utf-8') as f:
                    json.dump(result, f, indent=2, ensure_ascii=False)
                logger.info(f"ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {args.output}")
            print(json.dumps(result, indent=2, ensure_ascii=False))

            # Exit code
            if result.get('failed_devices', 0) == 0:
                sys.exit(0)
            else:
                sys.exit(1)
    except Exception as e:
        logger.error(f"L·ªói: {e}")
        print(json.dumps({
            "status": "error",
            "message": str(e)
        }, indent=2, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main() 