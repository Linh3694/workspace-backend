@echo off
REM Batch script ƒë·ªÉ theo d√µi v√† ph√¢n t√≠ch k·∫øt qu·∫£ ƒë·ªìng b·ªô

echo ========================================
echo     THEO D√ïI V√Ä PH√ÇN T√çCH ƒê·ªíNG B·ªò
echo ========================================

REM Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c scripts
cd /d "%~dp0"

REM Ki·ªÉm tra virtual environment c√≥ t·ªìn t·∫°i kh√¥ng
if not exist "venv\Scripts\activate.bat" (
    echo L·ªñI: Virtual environment ch∆∞a ƒë∆∞·ª£c t·∫°o
    echo Vui l√≤ng ch·∫°y setup.bat tr∆∞·ªõc ƒë·ªÉ thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
    pause
    exit /b 1
)

REM K√≠ch ho·∫°t virtual environment
echo K√≠ch ho·∫°t virtual environment...
call venv\Scripts\activate.bat

echo.
echo Ch·ªçn ch·∫ø ƒë·ªô theo d√µi:
echo 1. Ch·∫°y ƒë·ªìng b·ªô v√† l∆∞u k·∫øt qu·∫£ chi ti·∫øt
echo 2. Ch·ªâ ki·ªÉm tra thi·∫øt b·ªã l·ªói t·ª´ l·∫ßn ch·∫°y tr∆∞·ªõc
echo 3. Th·ªëng k√™ t·ªïng quan c√°c l·∫ßn ch·∫°y
echo 4. Ch·∫°y ƒë·ªìng b·ªô v·ªõi retry cho thi·∫øt b·ªã l·ªói
echo 5. Xu·∫•t b√°o c√°o Excel
echo.
set /p choice="Nh·∫≠p l·ª±a ch·ªçn (1-5): "

REM T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
if not exist "logs" mkdir logs

REM T·∫°o t√™n file log v·ªõi timestamp
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "Min=%dt:~10,2%" & set "Sec=%dt:~12,2%"
set "timestamp=%YYYY%-%MM%-%DD%_%HH%-%Min%-%Sec%"

if "%choice%"=="1" (
    echo Ch·∫°y ƒë·ªìng b·ªô v·ªõi log chi ti·∫øt...
    echo K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: logs\sync_result_%timestamp%.json
    python sync_all_devices.py --config-dir ./ --backend-url https://api-dev.wellspring.edu.vn --output logs\sync_result_%timestamp%.json --verbose
    echo.
    echo Ph√¢n t√≠ch k·∫øt qu·∫£...
    python -c "
import json, sys
try:
    with open('logs/sync_result_%timestamp%.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    print('üìä K·∫æT QU·∫¢ ƒê·ªíNG B·ªò:')
    print(f'‚úÖ Th√†nh c√¥ng: {data.get(\"successful_devices\", 0)}/{data.get(\"total_devices\", 0)} thi·∫øt b·ªã')
    print(f'‚ùå Th·∫•t b·∫°i: {data.get(\"failed_devices\", 0)} thi·∫øt b·ªã')
    print(f'‚è±Ô∏è Th·ªùi gian: {data.get(\"duration_seconds\", 0):.1f} gi√¢y')
    print(f'üìÅ Records x·ª≠ l√Ω: {data.get(\"total_records_processed\", 0)}')
    
    failed = [r for r in data.get('results', []) if r.get('status') == 'error']
    if failed:
        print('\n‚ùå THI·∫æT B·ªä L·ªñI:')
        for device in failed:
            print(f'  - {device.get(\"device_name\", \"Unknown\")}: {device.get(\"message\", \"Unknown error\")}')
except Exception as e:
    print(f'L·ªói ƒë·ªçc file k·∫øt qu·∫£: {e}')
"
    
) else if "%choice%"=="2" (
    echo Ki·ªÉm tra thi·∫øt b·ªã l·ªói...
    echo Danh s√°ch thi·∫øt b·ªã c√≥ v·∫•n ƒë·ªÅ:
    echo - device_002.txt (IP: 10.1.4.16) - L·ªói k·∫øt n·ªëi
    echo - device_003.txt (IP: 10.1.4.12) - L·ªói k·∫øt n·ªëi
    echo.
    echo Ch·∫°y test k·∫øt n·ªëi cho c√°c thi·∫øt b·ªã n√†y...
    python timeout_monitor.py --config-dir ./ --test-type connection --devices device_002.txt,device_003.txt
    
) else if "%choice%"=="3" (
    echo Th·ªëng k√™ t·ªïng quan...
    if exist "logs\*.json" (
        python -c "
import json, os, glob
from datetime import datetime

print('üìà TH·ªêNG K√ä T·ªîNG QUAN:')
log_files = glob.glob('logs/sync_result_*.json')
if not log_files:
    print('Ch∆∞a c√≥ file log n√†o')
    exit()

total_runs = len(log_files)
successful_devices = 0
failed_devices = 0
total_records = 0

for file in log_files[-5:]:  # 5 l·∫ßn ch·∫°y g·∫ßn nh·∫•t
    try:
        with open(file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        successful_devices += data.get('successful_devices', 0)
        failed_devices += data.get('failed_devices', 0)
        total_records += data.get('total_records_processed', 0)
        
        # Hi·ªÉn th·ªã t·ª´ng l·∫ßn ch·∫°y
        start_time = data.get('start_time', '').replace('T', ' ')[:19]
        print(f'üïê {start_time}: {data.get(\"successful_devices\", 0)}/{data.get(\"total_devices\", 0)} th√†nh c√¥ng')
    except:
        continue

print(f'\nüìä T·ªîNG K·∫æT {min(5, total_runs)} l·∫ßn ch·∫°y g·∫ßn nh·∫•t:')
print(f'‚úÖ T·ªïng thi·∫øt b·ªã th√†nh c√¥ng: {successful_devices}')
print(f'‚ùå T·ªïng thi·∫øt b·ªã th·∫•t b·∫°i: {failed_devices}')
print(f'üìÅ T·ªïng records x·ª≠ l√Ω: {total_records}')
if successful_devices + failed_devices > 0:
    success_rate = (successful_devices / (successful_devices + failed_devices)) * 100
    print(f'üìà T·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%%')
"
    ) else (
        echo Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™
        echo Vui l√≤ng ch·∫°y option 1 tr∆∞·ªõc ƒë·ªÉ t·∫°o log
    )
    
) else if "%choice%"=="4" (
    echo Ch·∫°y ƒë·ªìng b·ªô v·ªõi retry cho thi·∫øt b·ªã l·ªói...
    echo S·∫Ω th·ª≠ l·∫°i c√°c thi·∫øt b·ªã: device_002, device_003
    python sync_all_devices.py --config-dir ./ --backend-url https://api-dev.wellspring.edu.vn --retry-failed --max-retries 3 --output logs\retry_result_%timestamp%.json
    
) else if "%choice%"=="5" (
    echo Xu·∫•t b√°o c√°o Excel...
    python -c "
import json, glob, pandas as pd
from datetime import datetime

try:
    log_files = glob.glob('logs/sync_result_*.json')
    if not log_files:
        print('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t b√°o c√°o')
        exit()
    
    data = []
    for file in log_files:
        with open(file, 'r', encoding='utf-8') as f:
            result = json.load(f)
        
        data.append({
            'Th·ªùi gian': result.get('start_time', '').replace('T', ' ')[:19],
            'T·ªïng thi·∫øt b·ªã': result.get('total_devices', 0),
            'Th√†nh c√¥ng': result.get('successful_devices', 0),
            'Th·∫•t b·∫°i': result.get('failed_devices', 0),
            'Timeout': result.get('timeout_devices', 0),
            'Records x·ª≠ l√Ω': result.get('total_records_processed', 0),
            'Th·ªùi gian ch·∫°y (s)': result.get('duration_seconds', 0)
        })
    
    df = pd.DataFrame(data)
    excel_file = f'logs/sync_report_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.xlsx'
    df.to_excel(excel_file, index=False)
    print(f'üìä ƒê√£ xu·∫•t b√°o c√°o Excel: {excel_file}')
    
except ImportError:
    print('‚ùå C·∫ßn c√†i pandas ƒë·ªÉ xu·∫•t Excel: pip install pandas openpyxl')
except Exception as e:
    print(f'‚ùå L·ªói xu·∫•t b√°o c√°o: {e}')
"
    
) else (
    echo L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá
    goto :eof
)

if errorlevel 1 (
    echo.
    echo ‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh th·ª±c hi·ªán
) else (
    echo.
    echo ‚úÖ Ho√†n th√†nh th√†nh c√¥ng
)

echo.
echo Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng...
pause 