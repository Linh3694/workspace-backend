const PeriodDefinition = require('../models/PeriodDefinition');

/**
 * Utility ƒë·ªÉ gi√∫p mapping period definitions gi·ªØa Excel v√† Database
 */
class PeriodMappingHelper {
  
  /**
   * L·∫•y period definitions v√† t·∫°o mapping cho Excel import
   * @param {string} schoolYearId - ID nƒÉm h·ªçc
   * @param {string} schoolId - ID tr∆∞·ªùng
   * @returns {Object} Object ch·ª©a mapping v√† validation info
   */
  static async createExcelPeriodMapping(schoolYearId, schoolId) {
    try {
      // L·∫•y t·∫•t c·∫£ period definitions
      const allPeriods = await PeriodDefinition.find({
        schoolYear: schoolYearId,
        school: schoolId
      }).sort({ periodNumber: 1 });

      // L·ªçc ch·ªâ l·∫•y regular periods (ti·∫øt h·ªçc th·ª±c s·ª±)
      const regularPeriods = allPeriods.filter(p => p.type === 'regular');
      
      if (regularPeriods.length === 0) {
        return {
          success: false,
          error: 'Kh√¥ng t√¨m th·∫•y regular periods n√†o',
          mapping: null,
          regularMapping: null
        };
      }

      // T·∫°o mapping cho T·∫§T C·∫¢ periods (backward compatibility)
      const fullPeriodMap = {};
      allPeriods.forEach(p => {
        fullPeriodMap[p.periodNumber] = {
          startTime: p.startTime,
          endTime: p.endTime,
          type: p.type,
          label: p.label
        };
      });

      // T·∫°o mapping cho REGULAR periods (Excel s·∫Ω d√πng 1-10)
      const regularPeriodMap = {};
      regularPeriods.forEach((p, index) => {
        const excelPeriodNumber = index + 1; // Excel period: 1, 2, 3, ...
        regularPeriodMap[excelPeriodNumber] = {
          periodNumber: p.periodNumber, // Database period number
          startTime: p.startTime,
          endTime: p.endTime,
          label: p.label
        };
      });

      console.log(`üìä Period mapping summary:`);
      console.log(`   - Total periods: ${allPeriods.length}`);
      console.log(`   - Regular periods: ${regularPeriods.length}`);
      console.log(`   - Excel mapping: 1-${regularPeriods.length} ‚Üí DB periods ${regularPeriods.map(p => p.periodNumber).join(', ')}`);
      
      return {
        success: true,
        mapping: fullPeriodMap,
        regularMapping: regularPeriodMap,
        summary: {
          totalPeriods: allPeriods.length,
          regularPeriods: regularPeriods.length,
          maxExcelPeriod: regularPeriods.length,
          dbPeriodNumbers: regularPeriods.map(p => p.periodNumber)
        }
      };

    } catch (error) {
      console.error('‚ùå Error creating period mapping:', error);
      return {
        success: false,
        error: error.message,
        mapping: null,
        regularMapping: null
      };
    }
  }

  /**
   * Validate Excel period number v√† convert sang database period
   * @param {number} excelPeriodNumber - Period number t·ª´ Excel (1-10)
   * @param {Object} regularMapping - Mapping t·ª´ createExcelPeriodMapping
   * @returns {Object} K·∫øt qu·∫£ validation v√† conversion
   */
  static validateAndConvertExcelPeriod(excelPeriodNumber, regularMapping) {
    if (!regularMapping || typeof regularMapping !== 'object') {
      return {
        valid: false,
        error: 'Invalid regular mapping provided'
      };
    }

    const maxExcelPeriod = Object.keys(regularMapping).length;
    
    if (!excelPeriodNumber || excelPeriodNumber < 1 || excelPeriodNumber > maxExcelPeriod) {
      return {
        valid: false,
        error: `Period ${excelPeriodNumber} kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n t·ª´ 1-${maxExcelPeriod}`
      };
    }

    const mappedPeriod = regularMapping[excelPeriodNumber];
    if (!mappedPeriod) {
      return {
        valid: false,
        error: `Kh√¥ng t√¨m th·∫•y mapping cho period ${excelPeriodNumber}`
      };
    }

    return {
      valid: true,
      excelPeriod: excelPeriodNumber,
      dbPeriodNumber: mappedPeriod.periodNumber,
      startTime: mappedPeriod.startTime,
      endTime: mappedPeriod.endTime,
      label: mappedPeriod.label
    };
  }

  /**
   * Validate th·ªùi kh√≥a bi·ªÉu record tr∆∞·ªõc khi import
   * @param {Object} record - Record t·ª´ Excel
   * @param {Object} mappings - Mappings t·ª´ createExcelPeriodMapping
   * @param {Object} classMap - Map t·ª´ className sang classId
   * @returns {Object} K·∫øt qu·∫£ validation
   */
  static validateTimetableRecord(record, mappings, classMap) {
    const errors = [];
    
    // Validate required fields
    if (!record.classCode) {
      errors.push('Thi·∫øu classCode');
    } else if (!classMap[record.classCode]) {
      errors.push(`Kh√¥ng t√¨m th·∫•y l·ªõp ${record.classCode}`);
    }

    if (!record.subject) {
      errors.push('Thi·∫øu subject');
    }

    if (!record.dayOfWeek) {
      errors.push('Thi·∫øu dayOfWeek');
    } else if (!['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].includes(record.dayOfWeek)) {
      errors.push(`dayOfWeek kh√¥ng h·ª£p l·ªá: ${record.dayOfWeek}`);
    }

    if (!record.periodNumber) {
      errors.push('Thi·∫øu periodNumber');
    } else {
      const periodValidation = this.validateAndConvertExcelPeriod(record.periodNumber, mappings.regularMapping);
      if (!periodValidation.valid) {
        errors.push(periodValidation.error);
      }
    }

    if (errors.length > 0) {
      return {
        valid: false,
        errors: errors,
        record: record
      };
    }

    // Convert Excel period to DB period
    const periodConversion = this.validateAndConvertExcelPeriod(record.periodNumber, mappings.regularMapping);
    
    return {
      valid: true,
      convertedRecord: {
        ...record,
        classId: classMap[record.classCode],
        dbPeriodNumber: periodConversion.dbPeriodNumber,
        startTime: periodConversion.startTime,
        endTime: periodConversion.endTime
      }
    };
  }

  /**
   * Ph√¢n t√≠ch v√† b√°o c√°o v·ªÅ period conflicts
   * @param {Array} records - M·∫£ng records ƒë√£ validate
   * @returns {Object} B√°o c√°o conflicts
   */
  static analyzeConflicts(records) {
    const conflicts = {
      classTimeConflicts: [],
      teacherTimeConflicts: [],
      roomTimeConflicts: []
    };

    // Group by class + day + time
    const classTimeSlots = {};
    
    // Group by teacher + day + time (n·∫øu c√≥ teacher info)
    const teacherTimeSlots = {};
    
    records.forEach((record, index) => {
      const { classId, dayOfWeek, startTime, teachers } = record.convertedRecord;
      const timeSlotKey = `${classId}_${dayOfWeek}_${startTime}`;
      
      // Ki·ªÉm tra class conflicts
      if (classTimeSlots[timeSlotKey]) {
        conflicts.classTimeConflicts.push({
          timeSlot: `${dayOfWeek} ${startTime}`,
          conflictingRecords: [classTimeSlots[timeSlotKey], index]
        });
      } else {
        classTimeSlots[timeSlotKey] = index;
      }

      // Ki·ªÉm tra teacher conflicts (n·∫øu c√≥)
      if (teachers && Array.isArray(teachers)) {
        teachers.forEach(teacherId => {
          const teacherTimeKey = `${teacherId}_${dayOfWeek}_${startTime}`;
          if (teacherTimeSlots[teacherTimeKey]) {
            conflicts.teacherTimeConflicts.push({
              teacherId: teacherId,
              timeSlot: `${dayOfWeek} ${startTime}`,
              conflictingRecords: [teacherTimeSlots[teacherTimeKey], index]
            });
          } else {
            teacherTimeSlots[teacherTimeKey] = index;
          }
        });
      }
    });

    return {
      hasConflicts: conflicts.classTimeConflicts.length > 0 || conflicts.teacherTimeConflicts.length > 0,
      summary: {
        classConflicts: conflicts.classTimeConflicts.length,
        teacherConflicts: conflicts.teacherTimeConflicts.length,
        roomConflicts: conflicts.roomTimeConflicts.length
      },
      details: conflicts
    };
  }
}

module.exports = PeriodMappingHelper; 