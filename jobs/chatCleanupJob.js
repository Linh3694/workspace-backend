const cron = require('node-cron');
const { autoCleanupEmptyChats } = require('../controllers/Chat/chatController');

/**
 * Scheduled Job ƒë·ªÉ cleanup chat r·ªóng
 * - Chat 1-1 r·ªóng qu√° 1 gi·ªù
 * - Group chat r·ªóng qu√° 7 ng√†y
 * Ch·∫°y m·ªói 12 gi·ªù (2 l·∫ßn/ng√†y)
 */
class ChatCleanupJob {
    static start() {
        console.log('üöÄ Starting Chat Cleanup Job scheduler...');

        // Ch·∫°y m·ªói 12 gi·ªù (00:00, 12:00)
        cron.schedule('0 */12 * * *', async () => {
            try {
                console.log('üßπ [CRON] B·∫Øt ƒë·∫ßu cleanup chat r·ªóng...');

                const startTime = Date.now();
                const result = await autoCleanupEmptyChats();
                const endTime = Date.now();

                if (result.error) {
                    console.error(`‚ùå [CRON] L·ªói cleanup chat: ${result.error}`);
                    return;
                }

                const duration = ((endTime - startTime) / 1000).toFixed(2);
                
                if (result.deletedCount > 0) {
                    console.log(`‚úÖ [CRON] Cleanup ho√†n th√†nh trong ${duration}s:`, {
                        chatDeleted: result.deletedCount,
                        oneToOneChats: result.oneToOneChats,
                        groupChats: result.groupChats,
                        affectedUsers: result.affectedUsers
                    });
                } else {
                    console.log(`‚úÖ [CRON] Cleanup ho√†n th√†nh trong ${duration}s - Kh√¥ng c√≥ chat r·ªóng n√†o c·∫ßn x√≥a`);
                }
            } catch (error) {
                console.error('‚ùå [CRON] L·ªói trong chat cleanup job:', error);
            }
        }, {
            scheduled: true,
            timezone: "Asia/Ho_Chi_Minh"
        });

        console.log('‚úÖ Chat Cleanup Job ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch ch·∫°y m·ªói 12 gi·ªù');
    }

    static async runManual() {
        try {
            console.log('üßπ [MANUAL] B·∫Øt ƒë·∫ßu manual cleanup chat r·ªóng...');
            
            const startTime = Date.now();
            const result = await autoCleanupEmptyChats();
            const endTime = Date.now();
            
            if (result.error) {
                console.error(`‚ùå [MANUAL] L·ªói cleanup chat: ${result.error}`);
                return result;
            }
            
            const duration = ((endTime - startTime) / 1000).toFixed(2);
            
            console.log(`‚úÖ [MANUAL] Cleanup ho√†n th√†nh trong ${duration}s:`, {
                deletedCount: result.deletedCount,
                oneToOneChats: result.oneToOneChats,
                groupChats: result.groupChats,
                affectedUsers: result.affectedUsers
            });
            
            return result;
        } catch (error) {
            console.error('‚ùå [MANUAL] L·ªói trong manual cleanup:', error);
            return { error: error.message };
        }
    }
}

module.exports = ChatCleanupJob; 